#!/bin/bash

# Pet Paradise - Script de Sauvegarde GitHub pour Replit
# Automatise la sauvegarde compl√®te des modifications vers GitHub

# Configuration
COMMIT_MESSAGE="${1:-"Automatic backup - $(date '+%Y-%m-%d %H:%M:%S')"}"
PROJECT_NAME="Pet Paradise"

echo "üîê $PROJECT_NAME - Sauvegarde GitHub"
echo "=================================================="

# Fonction pour afficher les messages color√©s
log_info() { echo -e "\e[34m‚ÑπÔ∏è  $1\e[0m"; }
log_success() { echo -e "\e[32m‚úÖ $1\e[0m"; }
log_warning() { echo -e "\e[33m‚ö†Ô∏è  $1\e[0m"; }
log_error() { echo -e "\e[31m‚ùå $1\e[0m"; }

# V√©rification des pr√©requis
log_info "V√©rification des pr√©requis..."

# V√©rifier Git
if ! command -v git &> /dev/null; then
    log_error "Git n'est pas install√©"
    exit 1
fi

# V√©rifier si c'est un d√©p√¥t Git
if [ ! -d ".git" ]; then
    log_error "R√©pertoire .git non trouv√© - Pas un d√©p√¥t Git"
    exit 1
fi

# V√©rifier la connexion au d√©p√¥t distant
REMOTE_URL=$(git config --get remote.origin.url)
if [ -z "$REMOTE_URL" ]; then
    log_error "Aucun d√©p√¥t distant configur√©"
    exit 1
fi

log_success "D√©p√¥t distant: $REMOTE_URL"

# V√©rifier les fichiers critiques
log_info "V√©rification des fichiers critiques..."
CRITICAL_FILES=(
    "tests/AdminTest.php"
    "scripts/quick_backup.php"
    "scripts/backup_database.php"
    "scripts/restore_database.php"
    "deploy/api/config/database.php"
    "README_BACKUP.md"
)

MISSING_FILES=()
for file in "${CRITICAL_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -gt 0 ]; then
    log_warning "Fichiers manquants:"
    for file in "${MISSING_FILES[@]}"; do
        echo "  - $file"
    done
fi

# Cr√©er une sauvegarde de la base de donn√©es
log_info "Cr√©ation de la sauvegarde de la base de donn√©es..."
if [ -f "scripts/quick_backup.php" ]; then
    if php scripts/quick_backup.php; then
        log_success "Sauvegarde BDD cr√©√©e avec succ√®s"
    else
        log_warning "Erreur lors de la cr√©ation de la sauvegarde BDD"
    fi
else
    log_warning "Script de sauvegarde non trouv√©"
fi

# Afficher le statut Git
log_info "Statut Git actuel:"
git status --porcelain | while read -r line; do
    status="${line:0:2}"
    file="${line:3}"
    
    case "$status" in
        "A ") echo "  ‚ûï $file" ;;
        "M ") echo "  ‚úèÔ∏è  $file" ;;
        "D ") echo "  üóëÔ∏è  $file" ;;
        "??") echo "  ‚ùì $file" ;;
        *) echo "  üìÑ $file" ;;
    esac
done

# Ajouter tous les fichiers modifi√©s
log_info "Ajout des fichiers modifi√©s..."
git add .

# V√©rifier les fichiers ajout√©s
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    log_info "Aucun fichier modifi√© √† commiter"
    exit 0
fi

log_success "Fichiers ajout√©s au commit:"
echo "$STAGED_FILES" | while read -r file; do
    echo "  - $file"
done

# Cr√©er le commit
log_info "Cr√©ation du commit..."
if git commit -m "$COMMIT_MESSAGE"; then
    log_success "Commit cr√©√© avec succ√®s"
else
    log_error "Erreur lors du commit"
    exit 1
fi

# Push vers GitHub
log_info "Envoi vers GitHub..."
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "üì§ Push vers la branche: $CURRENT_BRANCH"

if git push origin "$CURRENT_BRANCH"; then
    log_success "Push vers GitHub r√©ussi"
else
    log_error "Erreur lors du push"
    exit 1
fi

# R√©sum√© final
echo ""
echo "üéâ SAUVEGARDE TERMIN√âE AVEC SUCC√àS!"
echo "=================================================="
log_success "Toutes les modifications ont √©t√© sauvegard√©es dans GitHub"
echo "üìÖ Date: $(date '+%Y-%m-%d %H:%M:%S')"
echo "üí¨ Message: $COMMIT_MESSAGE"
echo "üåê D√©p√¥t: $REMOTE_URL"
echo "üåø Branche: $CURRENT_BRANCH"

# Afficher les fichiers de sauvegarde disponibles
echo ""
echo "üíæ FICHIERS DE SAUVEGARDE DISPONIBLES:"
find scripts -name "*.sql" -type f 2>/dev/null | while read -r file; do
    size=$(du -h "$file" | cut -f1)
    echo "  - $(basename "$file") ($size)"
done

echo ""
echo "üîç V√âRIFICATION RECOMMAND√âE:"
echo "1. Visitez votre d√©p√¥t GitHub pour v√©rifier les modifications"
echo "2. Testez le d√©ploiement avec le fichier SQL g√©n√©r√©"
echo "3. V√©rifiez que l'acc√®s admin fonctionne (admin/admin123)"
echo ""
log_success "Sauvegarde GitHub termin√©e avec succ√®s!"